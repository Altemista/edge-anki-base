// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: base_status_model.go

package anki

import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *PosOption) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *PosOption) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"optTileNo":`)
	fflib.FormatBits2(buf, uint64(j.OptTileNo), 10, j.OptTileNo < 0)
	buf.WriteString(`,"optProbability":`)
	fflib.FormatBits2(buf, uint64(j.OptProbability), 10, j.OptProbability < 0)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtPosOptionbase = iota
	ffjtPosOptionnosuchkey

	ffjtPosOptionOptTileNo

	ffjtPosOptionOptProbability
)

var ffjKeyPosOptionOptTileNo = []byte("optTileNo")

var ffjKeyPosOptionOptProbability = []byte("optProbability")

// UnmarshalJSON umarshall json - template of ffjson
func (j *PosOption) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *PosOption) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtPosOptionbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtPosOptionnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'o':

					if bytes.Equal(ffjKeyPosOptionOptTileNo, kn) {
						currentKey = ffjtPosOptionOptTileNo
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPosOptionOptProbability, kn) {
						currentKey = ffjtPosOptionOptProbability
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyPosOptionOptProbability, kn) {
					currentKey = ffjtPosOptionOptProbability
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPosOptionOptTileNo, kn) {
					currentKey = ffjtPosOptionOptTileNo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtPosOptionnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtPosOptionOptTileNo:
					goto handle_OptTileNo

				case ffjtPosOptionOptProbability:
					goto handle_OptProbability

				case ffjtPosOptionnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_OptTileNo:

	/* handler: j.OptTileNo type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.OptTileNo = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OptProbability:

	/* handler: j.OptProbability type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.OptProbability = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *Status) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Status) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"msgID":`)
	fflib.FormatBits2(buf, uint64(j.MsgID), 10, j.MsgID < 0)
	buf.WriteString(`,"msgName":`)
	fflib.WriteJsonString(buf, string(j.MsgName))
	buf.WriteString(`,"msgTimestamp":`)

	{

		obj, err = j.MsgTimestamp.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"carNo":`)
	fflib.FormatBits2(buf, uint64(j.CarNo), 10, j.CarNo < 0)
	buf.WriteString(`,"carID":`)
	fflib.WriteJsonString(buf, string(j.CarID))
	buf.WriteString(`,"carSpeed":`)
	fflib.FormatBits2(buf, uint64(j.CarSpeed), 10, j.CarSpeed < 0)
	buf.WriteString(`,"carVersion":`)
	fflib.FormatBits2(buf, uint64(j.CarVersion), 10, j.CarVersion < 0)
	buf.WriteString(`,"carBatteryLevel":`)
	fflib.FormatBits2(buf, uint64(j.CarBatteryLevel), 10, j.CarBatteryLevel < 0)
	buf.WriteString(`,"laneOffset":`)
	fflib.AppendFloat(buf, float64(j.LaneOffset), 'g', -1, 32)
	buf.WriteString(`,"laneNo":`)
	fflib.FormatBits2(buf, uint64(j.LaneNo), 10, j.LaneNo < 0)
	buf.WriteString(`,"laneLength":`)
	fflib.FormatBits2(buf, uint64(j.LaneLength), 10, j.LaneLength < 0)
	buf.WriteString(`,"laneTimestamp":`)

	{

		obj, err = j.LaneTimestamp.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"posTileType":`)
	fflib.WriteJsonString(buf, string(j.PosTileType))
	buf.WriteString(`,"posTileNo":`)
	fflib.FormatBits2(buf, uint64(j.PosTileNo), 10, j.PosTileNo < 0)
	buf.WriteString(`,"posLocation":`)
	fflib.FormatBits2(buf, uint64(j.PosLocation), 10, j.PosLocation < 0)
	buf.WriteString(`,"posTimestamp":`)

	{

		obj, err = j.PosTimestamp.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"posOptions":`)
	if j.PosOptions != nil {
		buf.WriteString(`[`)
		for i, v := range j.PosOptions {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				err = v.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"maxTileNo":`)
	fflib.FormatBits2(buf, uint64(j.MaxTileNo), 10, j.MaxTileNo < 0)
	buf.WriteString(`,"TransitionTimestamp":`)

	{

		obj, err = j.TransitionTimestamp.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtStatusbase = iota
	ffjtStatusnosuchkey

	ffjtStatusMsgID

	ffjtStatusMsgName

	ffjtStatusMsgTimestamp

	ffjtStatusCarNo

	ffjtStatusCarID

	ffjtStatusCarSpeed

	ffjtStatusCarVersion

	ffjtStatusCarBatteryLevel

	ffjtStatusLaneOffset

	ffjtStatusLaneNo

	ffjtStatusLaneLength

	ffjtStatusLaneTimestamp

	ffjtStatusPosTileType

	ffjtStatusPosTileNo

	ffjtStatusPosLocation

	ffjtStatusPosTimestamp

	ffjtStatusPosOptions

	ffjtStatusMaxTileNo

	ffjtStatusTransitionTimestamp
)

var ffjKeyStatusMsgID = []byte("msgID")

var ffjKeyStatusMsgName = []byte("msgName")

var ffjKeyStatusMsgTimestamp = []byte("msgTimestamp")

var ffjKeyStatusCarNo = []byte("carNo")

var ffjKeyStatusCarID = []byte("carID")

var ffjKeyStatusCarSpeed = []byte("carSpeed")

var ffjKeyStatusCarVersion = []byte("carVersion")

var ffjKeyStatusCarBatteryLevel = []byte("carBatteryLevel")

var ffjKeyStatusLaneOffset = []byte("laneOffset")

var ffjKeyStatusLaneNo = []byte("laneNo")

var ffjKeyStatusLaneLength = []byte("laneLength")

var ffjKeyStatusLaneTimestamp = []byte("laneTimestamp")

var ffjKeyStatusPosTileType = []byte("posTileType")

var ffjKeyStatusPosTileNo = []byte("posTileNo")

var ffjKeyStatusPosLocation = []byte("posLocation")

var ffjKeyStatusPosTimestamp = []byte("posTimestamp")

var ffjKeyStatusPosOptions = []byte("posOptions")

var ffjKeyStatusMaxTileNo = []byte("maxTileNo")

var ffjKeyStatusTransitionTimestamp = []byte("TransitionTimestamp")

// UnmarshalJSON umarshall json - template of ffjson
func (j *Status) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *Status) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtStatusbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtStatusnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'T':

					if bytes.Equal(ffjKeyStatusTransitionTimestamp, kn) {
						currentKey = ffjtStatusTransitionTimestamp
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffjKeyStatusCarNo, kn) {
						currentKey = ffjtStatusCarNo
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyStatusCarID, kn) {
						currentKey = ffjtStatusCarID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyStatusCarSpeed, kn) {
						currentKey = ffjtStatusCarSpeed
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyStatusCarVersion, kn) {
						currentKey = ffjtStatusCarVersion
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyStatusCarBatteryLevel, kn) {
						currentKey = ffjtStatusCarBatteryLevel
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffjKeyStatusLaneOffset, kn) {
						currentKey = ffjtStatusLaneOffset
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyStatusLaneNo, kn) {
						currentKey = ffjtStatusLaneNo
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyStatusLaneLength, kn) {
						currentKey = ffjtStatusLaneLength
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyStatusLaneTimestamp, kn) {
						currentKey = ffjtStatusLaneTimestamp
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffjKeyStatusMsgID, kn) {
						currentKey = ffjtStatusMsgID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyStatusMsgName, kn) {
						currentKey = ffjtStatusMsgName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyStatusMsgTimestamp, kn) {
						currentKey = ffjtStatusMsgTimestamp
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyStatusMaxTileNo, kn) {
						currentKey = ffjtStatusMaxTileNo
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyStatusPosTileType, kn) {
						currentKey = ffjtStatusPosTileType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyStatusPosTileNo, kn) {
						currentKey = ffjtStatusPosTileNo
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyStatusPosLocation, kn) {
						currentKey = ffjtStatusPosLocation
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyStatusPosTimestamp, kn) {
						currentKey = ffjtStatusPosTimestamp
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyStatusPosOptions, kn) {
						currentKey = ffjtStatusPosOptions
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyStatusTransitionTimestamp, kn) {
					currentKey = ffjtStatusTransitionTimestamp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyStatusMaxTileNo, kn) {
					currentKey = ffjtStatusMaxTileNo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyStatusPosOptions, kn) {
					currentKey = ffjtStatusPosOptions
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyStatusPosTimestamp, kn) {
					currentKey = ffjtStatusPosTimestamp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyStatusPosLocation, kn) {
					currentKey = ffjtStatusPosLocation
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyStatusPosTileNo, kn) {
					currentKey = ffjtStatusPosTileNo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyStatusPosTileType, kn) {
					currentKey = ffjtStatusPosTileType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyStatusLaneTimestamp, kn) {
					currentKey = ffjtStatusLaneTimestamp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyStatusLaneLength, kn) {
					currentKey = ffjtStatusLaneLength
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyStatusLaneNo, kn) {
					currentKey = ffjtStatusLaneNo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyStatusLaneOffset, kn) {
					currentKey = ffjtStatusLaneOffset
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyStatusCarBatteryLevel, kn) {
					currentKey = ffjtStatusCarBatteryLevel
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyStatusCarVersion, kn) {
					currentKey = ffjtStatusCarVersion
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyStatusCarSpeed, kn) {
					currentKey = ffjtStatusCarSpeed
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyStatusCarID, kn) {
					currentKey = ffjtStatusCarID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyStatusCarNo, kn) {
					currentKey = ffjtStatusCarNo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyStatusMsgTimestamp, kn) {
					currentKey = ffjtStatusMsgTimestamp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyStatusMsgName, kn) {
					currentKey = ffjtStatusMsgName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyStatusMsgID, kn) {
					currentKey = ffjtStatusMsgID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtStatusnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtStatusMsgID:
					goto handle_MsgID

				case ffjtStatusMsgName:
					goto handle_MsgName

				case ffjtStatusMsgTimestamp:
					goto handle_MsgTimestamp

				case ffjtStatusCarNo:
					goto handle_CarNo

				case ffjtStatusCarID:
					goto handle_CarID

				case ffjtStatusCarSpeed:
					goto handle_CarSpeed

				case ffjtStatusCarVersion:
					goto handle_CarVersion

				case ffjtStatusCarBatteryLevel:
					goto handle_CarBatteryLevel

				case ffjtStatusLaneOffset:
					goto handle_LaneOffset

				case ffjtStatusLaneNo:
					goto handle_LaneNo

				case ffjtStatusLaneLength:
					goto handle_LaneLength

				case ffjtStatusLaneTimestamp:
					goto handle_LaneTimestamp

				case ffjtStatusPosTileType:
					goto handle_PosTileType

				case ffjtStatusPosTileNo:
					goto handle_PosTileNo

				case ffjtStatusPosLocation:
					goto handle_PosLocation

				case ffjtStatusPosTimestamp:
					goto handle_PosTimestamp

				case ffjtStatusPosOptions:
					goto handle_PosOptions

				case ffjtStatusMaxTileNo:
					goto handle_MaxTileNo

				case ffjtStatusTransitionTimestamp:
					goto handle_TransitionTimestamp

				case ffjtStatusnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_MsgID:

	/* handler: j.MsgID type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.MsgID = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MsgName:

	/* handler: j.MsgName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.MsgName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MsgTimestamp:

	/* handler: j.MsgTimestamp type=time.Time kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.MsgTimestamp.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CarNo:

	/* handler: j.CarNo type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.CarNo = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CarID:

	/* handler: j.CarID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CarID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CarSpeed:

	/* handler: j.CarSpeed type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.CarSpeed = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CarVersion:

	/* handler: j.CarVersion type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.CarVersion = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CarBatteryLevel:

	/* handler: j.CarBatteryLevel type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.CarBatteryLevel = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LaneOffset:

	/* handler: j.LaneOffset type=float32 kind=float32 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.LaneOffset = float32(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LaneNo:

	/* handler: j.LaneNo type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.LaneNo = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LaneLength:

	/* handler: j.LaneLength type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.LaneLength = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LaneTimestamp:

	/* handler: j.LaneTimestamp type=time.Time kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.LaneTimestamp.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PosTileType:

	/* handler: j.PosTileType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.PosTileType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PosTileNo:

	/* handler: j.PosTileNo type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.PosTileNo = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PosLocation:

	/* handler: j.PosLocation type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.PosLocation = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PosTimestamp:

	/* handler: j.PosTimestamp type=time.Time kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.PosTimestamp.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PosOptions:

	/* handler: j.PosOptions type=[]anki.PosOption kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.PosOptions = nil
		} else {

			j.PosOptions = []PosOption{}

			wantVal := true

			for {

				var tmpJPosOptions PosOption

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJPosOptions type=anki.PosOption kind=struct quoted=false*/

				{
					if tok == fflib.FFTok_null {

					} else {

						err = tmpJPosOptions.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
						if err != nil {
							return err
						}
					}
					state = fflib.FFParse_after_value
				}

				j.PosOptions = append(j.PosOptions, tmpJPosOptions)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MaxTileNo:

	/* handler: j.MaxTileNo type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.MaxTileNo = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TransitionTimestamp:

	/* handler: j.TransitionTimestamp type=time.Time kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.TransitionTimestamp.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
